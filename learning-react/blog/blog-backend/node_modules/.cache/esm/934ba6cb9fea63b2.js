let mongoose,Schema,bcrypt,jwt;_9fe‍.x([["default",()=>_9fe‍.o]]);_9fe‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_9fe‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_9fe‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
	username: String,
	hashedPassword: String,
});

UserSchema.methods.setPassword = async function(password){
	const hash = await bcrypt.hash(password, 10);
	this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password){
	const result = await bcrypt.compare(password, this.hashedPassword);
	return result;
};

UserSchema.methods.serialize = function() {
	const data = this.toJSON();
	delete data.hashedPassword;
	return data;
};

UserSchema.statics.findByUsername = function(username){
	return this.findOne({ username });
}

UserSchema.methods.generateToken = function() {
	const token = jwt.sign(
		{
			_id: this.id,
			username: this.username,
		},
		process.env.JWT_SECRET,
		{
			expiresIn: '7d',
		},
	);
	return token;
};

const User = mongoose.model('User', UserSchema);
_9fe‍.d(User);
